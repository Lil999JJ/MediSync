# Generated by Django 5.2.3 on 2025-07-03 13:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Consultorio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nivel', models.CharField(max_length=50)),
                ('numero_identificador', models.CharField(help_text="Ej: 'Piso 2, Puerta 5B'", max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Especialidad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cedula', models.CharField(help_text='Cédula de identidad del usuario.', max_length=15, unique=True)),
                ('rol', models.CharField(choices=[('ADMIN', 'Admin'), ('MEDICO', 'Médico'), ('PACIENTE', 'Paciente'), ('SECRETARIA', 'Secretaria')], default='PACIENTE', help_text='Rol del usuario en el sistema.', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='usuario_set', related_query_name='usuario', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='usuario_set', related_query_name='usuario', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='Usuarios.usuario')),
                ('fecha_nacimiento', models.DateField(help_text='Fecha de nacimiento del paciente.')),
                ('direccion', models.CharField(help_text='Dirección de residencia del paciente.', max_length=255)),
                ('telefono', models.CharField(help_text='Número de teléfono de contacto del paciente.', max_length=20)),
                ('genero', models.CharField(help_text='Género del paciente (ej. Masculino, Femenino).', max_length=15)),
                ('nacionalidad', models.CharField(help_text='Nacionalidad del paciente.', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Medico',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='Usuarios.usuario')),
                ('tarifa_consulta', models.DecimalField(decimal_places=2, help_text='Costo de la consulta con el médico.', max_digits=10)),
                ('consultorio', models.ForeignKey(help_text='Consultorio asignado al médico.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='Usuarios.consultorio')),
                ('especialidad', models.ForeignKey(help_text='Especialidad del médico.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='Usuarios.especialidad')),
            ],
        ),
        migrations.CreateModel(
            name='Secretaria',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='Usuarios.usuario')),
                ('medico_asociado', models.ForeignKey(blank=True, help_text='Médico al que asiste la secretaria.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='Usuarios.medico')),
            ],
        ),
    ]
